


## why we like immutability

- less moving parts

If an object is immutable, it can be "copied" simply by making another reference to it instead of copying the entire object. Because a reference is much smaller than the object itself, this results in memory savings and a potential boost in execution speed for programs which rely on copies (such as an undo-stack).

## immutablejs api

```js
// creation
const map = Immutable.Map({
  todo1: {
    title: "Todo 1",
    value: "Make it happen"
  }
})

// alternatively
const map = Immutable.Map([["todo1", {title: "Todo 1"}]])

// access
map.get("todo1").title // "Todo 1"

// other methods: set(), delete(), clear(), update(), merge()
// other accessors: has(), include(), find()
```

## why we like immer

- "just javascript" vs 

